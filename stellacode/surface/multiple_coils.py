import typing as tp

from jax.typing import ArrayLike
from pydantic import BaseModel, Extra, Field

from stellacode import mu_0_fac, np
from stellacode.tools import biot_et_savart, biot_et_savart_op
from stellacode.tools.utils import get_min_dist

from .abstract_surface import AbstractSurface
from .current import AbstractCurrent
from stellacode.tools.laplace_force import laplace_force
from .coil_surface import CoilSurface


class MultipleCoils(CoilSurface):
    """A class used to:
    * represent an abstract surfaces
    * computate of the magnetic field generated by a current carried by the surface.
    * visualize surfaces
    """

    coils: tp.List[CoilSurface]

    class Config:
        arbitrary_types_allowed = True

    def compute_surface_attributes(self, deg=2):
        for coil in self.coils:
            coil.compute_surface_attributes(deg=deg)
            coil._set_curent_op()

        for k in [
            "xyz",
            "jac_xyz",
            "normal",
            "ds",
            "normal_unit",
            "hess_xyz",
            "current_op",
            "principle_max",
            "principle_min",
        ]:
            val_list = []
            for coil in self.coils:
                val_list.append(getattr(coil.surface, k))
            setattr(self, k, np.concatenate(val_list, axis=1))
