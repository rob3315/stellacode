import collections

import stellacode.tools as tools
from stellacode import np
from stellacode.tools.utils import get_min_dist

from .coil_surface import CoilSurface


class RotatedSurface(CoilSurface):
    """A class used to:
    * represent an abstract surfaces
    * computate of the magnetic field generated by a current carried by the surface.
    * visualize surfaces
    """

    num_tor_symmetry: int = 1
    rotate_diff_current: int = 1

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        assert self.num_tor_symmetry * self.rotate_diff_current == self.surface.num_tor_symmetry
        # self.npts = self.nbpts[0] * self.nbpts[1]
        self.compute_surface_attributes()  # computation of the surface attributes

    def get_num_rotations(self):
        return self.num_tor_symmetry * self.rotate_diff_current

    def get_trainable_params(self):
        return self.surface.get_trainable_params()

    def update_params(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self.surface, k, v)
        self.compute_surface_attributes(deg=2)

    def get_curent_op(self):
        curent_potential_op = super().get_curent_op()

        inner_blocks = collections.deque(
            [curent_potential_op] + [np.zeros_like(curent_potential_op)] * (self.rotate_diff_current - 1)
        )
        blocks = []
        for i in range(len(inner_blocks)):
            blocks.append(np.concatenate(inner_blocks, axis=0))

            inner_blocks.rotate(1)
        blocks = np.concatenate(
            blocks,
            axis=2,
        )

        return np.concatenate([blocks] * self.num_tor_symmetry, axis=2)

    def compute_surface_attributes(self, deg=2):
        """compute surface elements used in the shape optimization up
        to degree deg
        deg is 0,1 or 2"""
        self.surface.compute_surface_attributes(deg=deg)

        num_rot = self.get_num_rotations()
        rot_tensor = tools.get_rot_tensor(num_rot)
        self.grids = self.surface.grids
        self.P = np.reshape(
            np.einsum("opq,ijq->iojp", rot_tensor, self.surface.P),
            (self.surface.nbpts[0], -1, 3),
        )

        # We also compute surface element dS and derivatives dS_u and dS_v:
        if deg >= 1:
            self.dpsi = np.reshape(
                np.einsum("opq,aqij->iojpa", rot_tensor, self.surface.dpsi),
                (self.surface.nbpts[0], -1, 3, 2),
            )
            "sba,taij->sijbt"
            # import pdb;pdb.set_trace()
            self.N = np.reshape(
                np.einsum("opq,qij->pioj", rot_tensor, self.surface.N),
                (
                    3,
                    self.surface.nbpts[0],
                    -1,
                ),
            )

            self.dS = np.concatenate([self.surface.dS] * num_rot, axis=1)

            self.n = np.reshape(
                np.einsum("opq,qij->pioj", rot_tensor, self.surface.n),
                (
                    3,
                    self.surface.nbpts[0],
                    -1,
                ),
            )

        if deg >= 2:
            self.principles = [np.concatenate([p] * num_rot, axis=1) for p in self.surface.principles]
        self.npts = self.surface.npts
        self.nbpts = self.surface.nbpts

    def get_min_distance(self, xyz):
        return get_min_dist(self.P, xyz)
